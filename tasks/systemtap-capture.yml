---
## FIXME! to generate complete graph, you might need debug package of executables
## https://wiki.ubuntu.com/Debug%20Symbol%20Packages

- name: get state of /proc/sys/kernel/perf_event_paranoid
  command: "cat /proc/sys/kernel/perf_event_paranoid"
  register: procperf
  changed_when: false
- debug: var=procperf.stdout
- name: update /proc/sys/kernel/perf_event_paranoid to 1 (can trace a command with perf stat or perf record, and get kernel profiling data)
  sysctl: name=kernel.perf_event_paranoid value=1 state=present
  when: procperf is defined and procperf.stdout is defined and procperf.stdout != 1

- name: check target directory exists
  file: dest="{{ flamegraph_outdir }}" state=directory mode=0755

- name: Java | run jmaps
  command: "{{ flamegraph_root }}/jmaps"
  args:
    chdir: "{{ flamegraph_outdir }}"
  register: jmaps
  failed_when: "'ERROR: ' in jmaps.stdout"
  when: hasJava is defined and hasJava.stat.exists
#- debug: var=jmaps

## FIXME! NOK xenial
## https://bugs.launchpad.net/ubuntu/+source/systemtap/+bug/1537125
## https://bugs.launchpad.net/ubuntu/+bug/1568689
- name: data capture with systemtap
  command: >
    stap -s 32 -D MAXBACKTRACE=100 -D MAXSTRINGLEN=4096 -D MAXMAPENTRIES=10240 \
    -D MAXACTION=10000 -D STP_OVERLOAD_THRESHOLD=5000000000 --all-modules \
    -ve 'global s; probe timer.profile { s[backtrace()] <<< 1; } 
    probe end { foreach (i in s+) { print_stack(i);
    printf("\t%d\n", @count(s[i])); } } probe timer.s({{ flamegraph_duration }}) { exit(); }' \
    > out.stap-stacks
  args:
    chdir: "{{ flamegraph_outdir }}"
    creates: "{{ flamegraph_outdir }}/out.stap-stacks"

- name: convert record to flamegraph
  shell: "{{ item.c }} creates={{ item.f }}"
  with_items:
    - { c: "{{ flamegraph_root }}/stackcollapse-stap.pl out.stap-stacks > out.stap-folded", f: "{{ flamegraph_outdir }}/out.stap-folded" }
    - { c: "cat out.stap-folded | {{ flamegraph_root }}/flamegraph.pl > {{ flamegraph_outfile }}", f: "{{ flamegraph_outfile }}" }

