---

## FIXME! to generate complete graph, you might need debug package of executables
## https://wiki.ubuntu.com/Debug%20Symbol%20Packages

- name: get state of /proc/sys/kernel/perf_event_paranoid
  command: "cat /proc/sys/kernel/perf_event_paranoid"
  register: procperf
  changed_when: false
- debug: var=procperf.stdout
- name: update /proc/sys/kernel/perf_event_paranoid to 1 (can trace a command with perf stat or perf record, and get kernel profiling data)
  sysctl: name=kernel.perf_event_paranoid value=1 state=present
  when: procperf is defined and procperf.stdout is defined and procperf.stdout != 1

- name: check target directory exists
  file: dest="{{ flamegraph_outdir }}" state=directory mode=0755

## FIXME! https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=803241  patch/still NOK on xenial
- name: call dkms to ensure ktapvm kernel module available
#  command: dkms autoinstall
  command: dkms install -m ktapvm/0.4+git20150927-1

- name: ensure ktapvm module loaded
  modprobe:
    name: ktapvm
    state: present

- name: Java | run jmaps
  command: "{{ flamegraph_root }}/jmaps"
  args:
    chdir: "{{ flamegraph_outdir }}"
  register: jmaps
  failed_when: "'ERROR: ' in jmaps.stdout"
  when: hasJava is defined and hasJava.stat.exists
#- debug: var=jmaps

- name: capture data with ktap
  command: >
    ktap -e 's = ptable(); profile-1ms { s[backtrace(12, -1)] <<< 1 } trace_end { for (k, v in pairs(s)) { print(k, count(v), "\n") } } tick-30s { exit(0) }' -o out.kstacks
  args:
    chdir: "{{ flamegraph_outdir }}"
    creates: "{{ flamegraph_outdir }}/out.kstacks"
  register: ktapcapture

- name: convert ktap record to flamegraph
  shell: "{{ item.c }} creates={{ item.f }}"
  with_items:
    - { c: "sed 's/  //g' out.kstacks | {{ flamegraph_root }}/stackcollapse.pl > out.kstacks.folded", f: "{{ flamegraph_outdir }}/out.kstacks.folded" }
    - { c: "{{ flamegraph_root }}/flamegraph.pl out.kstacks.folded > {{ flamegraph_outfile }}", f: "{{ flamegraph_outfile }}" }
#  environment:
#    LC_ALL: en_US.UTF-8
